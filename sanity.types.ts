/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Comment = {
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  authorName?: string;
  commentedAt?: string;
  content?: string;
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
};

export type SiteInfo = {
  _id: string;
  _type: "siteInfo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  launchDate?: string;
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  subCategory?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "subCategory";
  };
  publishedAt?: string;
  lastEdAt?: string;
  description?: string;
  content?: string;
};

export type SubCategory = {
  _id: string;
  _type: "subCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  topic?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "topic";
  };
  lastEdAt?: string;
};

export type Topic = {
  _id: string;
  _type: "topic";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Markdown = string;

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Comment | SiteInfo | Tag | Post | SubCategory | Category | Topic | Slug | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Markdown | Color | RgbaColor | HsvaColor | HslaColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: src/sanity/lib/queries.ts
// Variable: POSTS_QUERY
// Query: *[_type == "post"]  | order(publishedAt desc)[0...6]  {    category->{      title,      "slug":slug.current,      topic->{        title,        "slug":slug.current      }    },    _id,    title,    "slug": slug.current,    publishedAt,    lastEdAt,    description,    tags->{      title,      "slug":slug.current    }  }
export type POSTS_QUERYResult = Array<{
  category: {
    title: string | null;
    slug: string | null;
    topic: {
      title: string | null;
      slug: string | null;
    } | null;
  } | null;
  _id: string;
  title: string | null;
  slug: string | null;
  publishedAt: string | null;
  lastEdAt: string | null;
  description: string | null;
  tags: null;
}>;
// Variable: ALL_POSTS_QUERY
// Query: *[_type == "post"]  | order(publishedAt desc) {    "slug": slug.current,    _id,    title,    description,    publishedAt,    lastEdAt,    tags->{      title,      "slug":slug.current    },    category->{      title,      "slug":slug.current,      topic->{        title,        "slug":slug.current      }    }  }
export type ALL_POSTS_QUERYResult = Array<{
  slug: string | null;
  _id: string;
  title: string | null;
  description: string | null;
  publishedAt: string | null;
  lastEdAt: string | null;
  tags: null;
  category: {
    title: string | null;
    slug: string | null;
    topic: {
      title: string | null;
      slug: string | null;
    } | null;
  } | null;
}>;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"]    | order(title asc)    {      "slug":slug.current,      title,      _id,      description,      topic->{        "slug":slug.current      }    }
export type CATEGORIES_QUERYResult = Array<{
  slug: string | null;
  title: string | null;
  _id: string;
  description: string | null;
  topic: {
    slug: string | null;
  } | null;
}>;
// Variable: LAUNCH_DATE_QUERY
// Query: *[_type == "siteInfo"][0]{  launchDate}
export type LAUNCH_DATE_QUERYResult = {
  launchDate: string | null;
} | null;
// Variable: POST_ROUTE_QUERY
// Query: *[_type == "post"]{  category->{    topic->{      "slug":slug.current    },    "slug":slug.current  },  "slug":slug.current}
export type POST_ROUTE_QUERYResult = Array<{
  category: {
    topic: {
      slug: string | null;
    } | null;
    slug: string | null;
  } | null;
  slug: string | null;
}>;
// Variable: TOPIC_ROUTE_QUERY
// Query: *[_type == "topic"]{  "slug":slug.current,}
export type TOPIC_ROUTE_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: CATEGORY_BY_SLUG
// Query: *[_type == "category" && slug.current == $postSlug]{    "categoryRef":_id,    "categorySlug":slug.current,    "slug":slug.current,    title,    "categoryTitle":title,    description,    lastEdAt,}[0]
export type CATEGORY_BY_SLUGResult = {
  categoryRef: string;
  categorySlug: string | null;
  slug: string | null;
  title: string | null;
  categoryTitle: string | null;
  description: string | null;
  lastEdAt: string | null;
} | null;
// Variable: POST_DETAIL_BY_SLUG
// Query: *[_type == "post" && slug.current == $postSlug]  {    'categoryRef':category._ref,    'categoryTitle':category->title,    'categorySlug':category->slug.current,    "slug":slug.current,    title,    content,    description,    lastEdAt,  }[0]
export type POST_DETAIL_BY_SLUGResult = {
  categoryRef: string | null;
  categoryTitle: string | null;
  categorySlug: string | null;
  slug: string | null;
  title: string | null;
  content: string | null;
  description: string | null;
  lastEdAt: string | null;
} | null;
// Variable: POSTS_BY_CATEGORY
// Query: *[_type == "subCategory" && category._ref == $categoryRef]{  title,  "posts": *[_type == "post" && references(^._id)]{    title,    "slug":slug.current  }}
export type POSTS_BY_CATEGORYResult = Array<{
  title: string | null;
  posts: Array<{
    title: string | null;
    slug: string | null;
  }>;
}>;
// Variable: CATEGORY_BY_TOPIC_SLUG
// Query: *[_type == "category" && topic->slug.current == $topicSlug]{  title,  "slug":slug.current,  description,  lastEdAt,  "topicRef":topic._ref,  "topicSlug":topic->slug.current,  "topicTitle":topic->title,  "posts": *[_type == "post" && references(^._id)]{    title,    "slug":slug.current,    publishedAt,    lastEdAt,    description,    tags->{      title,      "slug":slug.current    }  }}[0...6]
export type CATEGORY_BY_TOPIC_SLUGResult = Array<{
  title: string | null;
  slug: string | null;
  description: string | null;
  lastEdAt: string | null;
  topicRef: string | null;
  topicSlug: string | null;
  topicTitle: string | null;
  posts: Array<{
    title: string | null;
    slug: string | null;
    publishedAt: string | null;
    lastEdAt: string | null;
    description: string | null;
    tags: null;
  }>;
}>;
// Variable: TOPIC_BY_SLUG
// Query: *[_type == "topic" && slug.current == $topicSlug]{  title,  "slug":slug.current}[0]
export type TOPIC_BY_SLUGResult = {
  title: string | null;
  slug: string | null;
} | null;
// Variable: TOPIC_PAGE_CONTENT_BY_TOPIC_SLUG
// Query: *[_type == "topic" && slug.current == $topicSlug]{    title,    "slug":slug.current,    description,    "categories": *[_type == "category" && references(^._id)]{      title,      "slug":slug.current,      description,    }  }[0]
export type TOPIC_PAGE_CONTENT_BY_TOPIC_SLUGResult = {
  title: string | null;
  slug: string | null;
  description: string | null;
  categories: Array<{
    title: string | null;
    slug: string | null;
    description: string | null;
  }>;
} | null;
// Variable: COMMENT_BY_POST_SLUG
// Query: *[_type == "comment" && post->slug.current == $postSlug] {    _id,    authorName,    content,    commentedAt,    post->{title, slug}  }
export type COMMENT_BY_POST_SLUGResult = Array<{
  _id: string;
  authorName: string | null;
  content: string | null;
  commentedAt: string | null;
  post: {
    title: string | null;
    slug: Slug | null;
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"post\"]\n  | order(publishedAt desc)[0...6]\n  {\n    category->{\n      title,\n      \"slug\":slug.current,\n      topic->{\n        title,\n        \"slug\":slug.current\n      }\n    },\n    _id,\n    title,\n    \"slug\": slug.current,\n    publishedAt,\n    lastEdAt,\n    description,\n    tags->{\n      title,\n      \"slug\":slug.current\n    }\n  }": POSTS_QUERYResult;
    "*[_type == \"post\"]\n  | order(publishedAt desc) {\n    \"slug\": slug.current,\n    _id,\n    title,\n    description,\n    publishedAt,\n    lastEdAt,\n    tags->{\n      title,\n      \"slug\":slug.current\n    },\n    category->{\n      title,\n      \"slug\":slug.current,\n      topic->{\n        title,\n        \"slug\":slug.current\n      }\n    }\n  }": ALL_POSTS_QUERYResult;
    "*[_type == \"category\"]\n    | order(title asc)\n    {\n      \"slug\":slug.current,\n      title,\n      _id,\n      description,\n      topic->{\n        \"slug\":slug.current\n      }\n    }\n  ": CATEGORIES_QUERYResult;
    "*[_type == \"siteInfo\"][0]{\n  launchDate\n}": LAUNCH_DATE_QUERYResult;
    "*[_type == \"post\"]{\n  category->{\n    topic->{\n      \"slug\":slug.current\n    },\n    \"slug\":slug.current\n  },\n  \"slug\":slug.current\n}": POST_ROUTE_QUERYResult;
    "*[_type == \"topic\"]{\n  \"slug\":slug.current,\n}": TOPIC_ROUTE_QUERYResult;
    "*[_type == \"category\" && slug.current == $postSlug]{\n    \"categoryRef\":_id,\n    \"categorySlug\":slug.current,\n    \"slug\":slug.current,\n    title,\n    \"categoryTitle\":title,\n    description,\n    lastEdAt,\n}[0]": CATEGORY_BY_SLUGResult;
    "*[_type == \"post\" && slug.current == $postSlug]\n  {\n    'categoryRef':category._ref,\n    'categoryTitle':category->title,\n    'categorySlug':category->slug.current,\n    \"slug\":slug.current,\n    title,\n    content,\n    description,\n    lastEdAt,\n  }[0]": POST_DETAIL_BY_SLUGResult;
    "*[_type == \"subCategory\" && category._ref == $categoryRef]{\n  title,\n  \"posts\": *[_type == \"post\" && references(^._id)]{\n    title,\n    \"slug\":slug.current\n  }\n}": POSTS_BY_CATEGORYResult;
    "*[_type == \"category\" && topic->slug.current == $topicSlug]{\n  title,\n  \"slug\":slug.current,\n  description,\n  lastEdAt,\n\n  \"topicRef\":topic._ref,\n  \"topicSlug\":topic->slug.current,\n  \"topicTitle\":topic->title,\n  \"posts\": *[_type == \"post\" && references(^._id)]{\n    title,\n    \"slug\":slug.current,\n    publishedAt,\n    lastEdAt,\n    description,\n    tags->{\n      title,\n      \"slug\":slug.current\n    }\n  }\n}[0...6]": CATEGORY_BY_TOPIC_SLUGResult;
    "*[_type == \"topic\" && slug.current == $topicSlug]{\n  title,\n  \"slug\":slug.current\n}[0]": TOPIC_BY_SLUGResult;
    "*[_type == \"topic\" && slug.current == $topicSlug]{\n    title,\n    \"slug\":slug.current,\n    description,\n    \"categories\": *[_type == \"category\" && references(^._id)]{\n      title,\n      \"slug\":slug.current,\n      description,\n    }\n  }[0]": TOPIC_PAGE_CONTENT_BY_TOPIC_SLUGResult;
    "*[_type == \"comment\" && post->slug.current == $postSlug] {\n    _id,\n    authorName,\n    content,\n    commentedAt,\n    post->{title, slug}\n  }": COMMENT_BY_POST_SLUGResult;
  }
}
